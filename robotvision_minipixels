import cv2
import os
#import serial
#import time

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)

base_folder = 'Capture_Dataset'
if not os.path.exists(base_folder):
    os.makedirs(base_folder)

file_count = 0

mata_rgb_folder = os.path.join(base_folder, 'Mata/RGB')
mata_gray_folder = os.path.join(base_folder, 'Mata/Grayscale')
mata_binary_folder = os.path.join(base_folder, 'Mata/Binary')
mata_data_folder = os.path.join(base_folder, 'Mata/Data')

mulut_rgb_folder = os.path.join(base_folder, 'Mulut/RGB')
mulut_gray_folder = os.path.join(base_folder, 'Mulut/Grayscale')
mulut_binary_folder = os.path.join(base_folder, 'Mulut/Binary')
mulut_data_folder = os.path.join(base_folder, 'Mulut/Data')

folders = [mata_rgb_folder, mata_gray_folder, mata_binary_folder, mata_data_folder,
           mulut_rgb_folder, mulut_gray_folder, mulut_binary_folder, mulut_data_folder]
for folder in folders:
    if not os.path.exists(folder):
        os.makedirs(folder)

while True:
    _, img = cap.read()
    _, img_frame = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 80, 255, cv2.THRESH_BINARY)
    _, binary_frame = cv2.threshold(gray, 110, 255, cv2.THRESH_BINARY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 4)

    for (x, y, w, h) in faces:
        # Bounding boxes and text annotations
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
        main_coordinates_text = f'Main: ({x}, {y})'
        cv2.putText(img, main_coordinates_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        main_size_text = f'{w} x {h} pixels'
        cv2.putText(img, main_size_text, (x, y + h + 15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        inner_x, inner_y, inner_w, inner_h = x + 35, y + 54, w - 70, h - 137
        cv2.rectangle(img, (inner_x, inner_y), (inner_x + inner_w, inner_y + inner_h), (0, 0, 255), 2)
        cv2.putText(img, f'Inner: ({inner_x}, {inner_y})', (inner_x, inner_y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
        cv2.putText(img, f'{inner_w} x {inner_h} pixels', (inner_x, inner_y + inner_h + 15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

        inner_xm, inner_ym, inner_wm, inner_hm = x + 52, y + 116, w - 105, h - 130
        cv2.rectangle(img, (inner_xm, inner_ym), (inner_xm + inner_wm, inner_ym + inner_hm), (0, 0, 255), 2)
        cv2.putText(img, f'Inner: ({inner_xm}, {inner_ym})', (inner_xm, inner_ym - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
        cv2.putText(img, f'{inner_wm} x {inner_hm} pixels', (inner_xm, inner_ym + inner_hm + 15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)

        mata = img_frame[inner_y:inner_y + inner_h, inner_x:inner_x + inner_w]
        bc = binary_frame[inner_y:inner_y + inner_h, inner_x:inner_x + inner_w]
        gc = gray [inner_y:inner_y + inner_h, inner_x:inner_x + inner_w]
        bin_mata = (bc/255).astype(int)

        mulut = img_frame [inner_ym:inner_ym + inner_hm, inner_xm:inner_xm + inner_wm]
        bc_mulut = binary_frame [inner_ym:inner_ym + inner_hm, inner_xm:inner_xm + inner_wm]
        gc_mulut = gray [inner_ym:inner_ym + inner_hm, inner_xm:inner_xm + inner_wm]
        bin_mulut = (bc_mulut / 255).astype(int)

        if 90 <= inner_w <= 100 and 20 <= inner_h <= 30:
            cv2.putText(img, "in range, keep steady", (10, 21), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            # print(bin_normalized)
            if cv2.waitKey(1) & 0xFF == ord('p'):
                # Save Mata images and data
                cv2.imwrite(os.path.join(mata_rgb_folder, f'img_{file_count}_rgb.jpg'), mata)
                cv2.imwrite(os.path.join(mata_gray_folder, f'img_{file_count}_gray.jpg'), gc)
                cv2.imwrite(os.path.join(mata_binary_folder, f'img_{file_count}_binary.jpg'), bc)

                with open(os.path.join(mata_data_folder, f'data{file_count}.txt'), 'w') as file:
                    for row in bin_mata:
                        file.write(' '.join(map(str, row)) + '\n')

                # Save Mulut images and data
                cv2.imwrite(os.path.join(mulut_rgb_folder, f'img_{file_count}_rgb.jpg'), mulut)
                cv2.imwrite(os.path.join(mulut_gray_folder, f'img_{file_count}_gray.jpg'), gc)
                cv2.imwrite(os.path.join(mulut_binary_folder, f'img_{file_count}_binary.jpg'), bc_mulut)

                with open(os.path.join(mulut_data_folder, f'data{file_count}.txt'), 'w') as file:
                    for row in bin_mulut:
                        file.write(' '.join(map(str, row)) + '\n')
                file_count += 1

    '''            with open(os.path.join(mulut_data_folder, f'data{file_count}.txt'), 'w') as file:
                    for row in bin_normalized:
                        file.write(' '.join(map(str, row)) + '\n')

                ser = serial.Serial('COM2', 9600)
                time.sleep(2)
'''

    cv2.imshow('main', img)
    cv2.imshow('binary', binary_frame)

    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
